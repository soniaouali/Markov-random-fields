def subdivision(img_obs):  
    # On divise l'image en 4 site vu qu'on travaille avec les 8 voisins
    #Site_1 représente la première subdivision         
    Site_1= img_obs[0::2,0::2]
    #Site_2 représente la deuxième subdivision  
    Site_2= img_obs[1::2,0::2]
    #Site_3 représente la troisème subdivision       
    Site_3= img_obs[0::2,1::2] 
    #Site_4 représente la première subdivision   
    Site_4= img_obs[1::2,1::2]
       
    #liste vide qui va regrouper tous les voisins de chaque site dans img_obs  
    liste_Nei=[]
    
    #ici on calcule pour chaque site ses voisins et on les stock dans liste_Nei_1 
    for p_x in range(np.shape(img_obs)[1]):
        for p_y in range(np.shape(img_obs)[0]):
            liste_Nei.append(get_8_neighbors(img_obs,p_x,p_y))
    
    #On transforme la liste en un tableau de la même taille que l'image        
    N=(np.array(liste_Nei)).reshape(np.shape(img_obs)[0],np.shape(img_obs)[1],np.shape(img_obs)[2]*8)
    
    N1= N[0::2,0::2] 
    N2= N[1::2,0::2]
    N3= N[0::2,1::2]
    N4= N[1::2,1::2]
#    print(N1.shape)
 
    
    Site_Nei_1=np.dstack((Site_1,N1))

    Site_Nei_2=np.dstack((Site_2,N2))

    Site_Nei_3=np.dstack((Site_3,N3))

    Site_Nei_4=np.dstack((Site_4,N4))

    sites =np.dstack((Site_Nei_1,Site_Nei_2,Site_Nei_3,Site_Nei_4))
    sites=np.array(np.dsplit(sites, 4))
    return sites
